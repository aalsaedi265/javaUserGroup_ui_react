



https://youtu.be/vtgR2S4Hb6A


This is full stack app using react & java with spring boot.

## Built using react 18 & java 20


## Installation
to initlize spring you can use website https://start.spring.io/
or use the exension in vscode
both works however i prefer to use vscode while older devlopers will use the site, which still valid here is the lay out for how to start


Press Ctrl+Shift+P to open the Command Palette.
Type Spring Initializr: Generate a Maven Project and select it.
Follow the prompts to configure your project:

Group ID: com.example => Name of file runs your project it will be set to it in application.properties

Artifact ID: demo => Name of your project

Name: Demo
Dependencies: Add dependencies like Spring Web, Spring Boot DevTools, Spring Data JPA, etc.

## Dependencies
spring data jpa
h2 database
Lombok
spring web

## Run Application

project root directory: ./mvnw spring-boot:run
or
spring boot extension pack
press Ctrl+Shift+P (vs code) to open the Command Palette.
Type Spring Boot Dashboard and select it.
In the Spring Boot Dashboard, locate your project and click the play (run) button next to it

## port
application.properties file located in src/main/resources. By default, Spring Boot uses port 8080 if no port is specified
if you want to change it user server.port
server.port=8081


## HTTP
http://localhost:8080/api/groups

install HTTPie for testing CRUD
http :8080/api/groups

http POST :8080/api/group name='Tarterous JUG' city='4th Circle, valley of sorrow' country=USA
http :8080/api/group/5
http PUT :8080/api/group/5 id=6 name='Tarterous JUG' address='in the mines'
http DELETE :8080/api/group/5

### REACT
app will be the name of directory
npx create-react-app directoryName

PROXY the server side api in the react package json
if you don't do it it will fetch data to the front end
"proxy": "http://localhost:8080"
its the one i chose for java server side

cookiesProvider allows you to read the CSRF cookie and send it back as a header

The useCookies(['XSRF-TOKEN']) hook reads the XSRF-TOKEN cookie for CSRF protection. The token is included in request headers ('X-XSRF-TOKEN': cookies['XSRF-TOKEN']) to verify that requests are from authenticated users and prevent CSRF attacks.

## CORS
when 405 error occurs, it means CORS is not allowed.
or when you send post request without cors header it will not work
in spring boot you can use spring.web.cors.EnableCORS and buit it a config folder then use it in controller

## OAuth0

alias x = command of choice
1. install from https://github.com/auth0/auth0-cli   based on your OS do this in terminal less chance of error

check if auth0 is installed
auth0 --version

if not you will have to install it manually in you system
open your terminal as ADMINISTRATOR and run below based on your path

[System.Environment]::SetEnvironmentVariable('PATH', $Env:PATH + ";C:\your\actuall\path\toProject", [System.EnvironmentVariableTarget]::User)


now will have it when running auth0 --version

make account with auth0 before you do this

2.  auth0 login   
    auth0 apps create 
    provide a memorable name
    select Regular Web Application. 

    http://localhost:8080/login/oauth2/code/auth0  frontend  Callback URLs

    http://localhost:3000,http://localhost:8080  backend   Allowed Logout URL


    here is mine for example
    CLIENT ID            ldkfjasldk;fjasklfjsadlfjasljklol
    NAME                 React + SpringBoot
    DESCRIPTION
    TYPE                 Regular Web Application
    CALLBACKS            http://localhost:8080/login/oauth2/code/auth0
    ALLOWED LOGOUT URLS  http://localhost:3000, http://localhost:8080
    ALLOWED ORIGINS
    ALLOWED WEB ORIGINS
    TOKEN ENDPOINT AUTH
    GRANTS               implicit, authorization_code, refresh_token, client_credentials
    METADATA

    
3.

    auth0 apps open
    pick the project your working on to grab the secret key
    the in the properties file you will see the secreet key varable, don't put secret in the hard code lol


oauth0 dash board https://manage.auth0.com/

# make sure to include the trailing slash for the Auth0 issuer
spring.security.oauth2.client.provider.auth0.issuer-uri=https://<your-auth0-domain>/
spring.security.oauth2.client.registration.auth0.client-id=<your-client-id>
spring.security.oauth2.client.registration.auth0.client-secret=<your-client-secret>
spring.security.oauth2.client.registration.auth0.scope=openid,profile,email

you can do this also with okta, i use the auth0 because everyone in my area uses it, and it will get me more money when i work ahhaahahah 

## security
 HttpSecurity object is configured to authorize requests 
 AuthorizeHttpRequests method is used to specify the request patterns that should be allowed or denied. In this case, the patterns /, /index.html, /static/**, /*.ico, /*.json, /*.png, and /api/user are allowed for all users. Any other requests will require authentication.

CSRF protection by setting the CSRF token repository and the CSRF token request handler
Custom filter called CookieCsrfFilter after the BasicAuthenticationFilter.

returns the built HttpSecurity object.


## Production
./mvnw spring-boot:run -Pprod
